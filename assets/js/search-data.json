{
  
    
        "post0": {
            "title": "Messing with WordClouds using PowerShell",
            "content": "Install PSWordCloud by @vexx32 . Install-Module PSWordCloud -Force . . Grab the .NET Interactive codebase, extract the zip and delete it: . irm https://api.github.com/repos/dotnet/interactive/zipball -OutFile interactive.zip try { Expand-Archive ./interactive.zip -Force } finally { Remove-Item ./interactive.zip } . . Get all of the files from the interactive folder, read their contents and craft a word cloud with it. . gci -Recurse -File ./interactive/ | gc | New-WordCloud -Path ./dotnet-interactive.svg . . Leveraging the #!markdown magic command, we can render our new SVG: . Note: My blog mangles this path for some reason... the actual &#8217;path&#8217; should just be dotnet-interactive.svg . #!markdown ![.NET Interactive codebase word cloud](/blog/images/copied_from_nb/dotnet-interactive.svg) . .",
            "url": "https://tylerleonhardt.github.io/blog/jupyter/powershell/pswordcloud/2020/03/16/Word-Clouds.html",
            "relUrl": "/jupyter/powershell/pswordcloud/2020/03/16/Word-Clouds.html",
            "date": " ‚Ä¢ Mar 16, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Azure PowerShell VM Visualization demo",
            "content": "Prerequisites . Install required modules . You&#39;ll need to install Az.Compute and Az.Resources for this Notebook. . Install-Module Az.Compute,Az.Resources -Force . . Authenticate and set context . First connect to your Azure account. . Connect-AzAccount . WARNING: To sign in, use a web browser to open the page https://microsoft.com/devicelogin and enter the code EGLUE983V to authenticate. Account SubscriptionName TenantId Environment - - -- -- tyleonha@microsoft.com Thanks Microsoft 72f988bf-86f1-41af-91ab-2d7cd011db47 AzureCloud . (Optional) If your account contains more than one active subscription the first one will be selected for further use. To select another subscription, use Set-AzContext. . Set-AzContext -Subscription &quot;My Subscription&quot; . (Optional) Populate Azure with test VMs . Here&#39;s a script that will create a number of VMs. Feel free to change the value at the top. . Note: This can take a LONG time. . # IMPORTANT VARIABLES $RESOURCE_GROUP_NAME = &#39;VMVisDemo&#39; $LOCATION = &#39;East US 2&#39; $NUM_OF_VMs = 10 $USER_CREDENTIAL = Get-Credential . PowerShell credential request Enter your credentials. . . Write-Host &quot;Creting resource group.&quot; New-AzResourceGroup -Name $RESOURCE_GROUP_NAME -Location $LOCATION | Out-Null Write-Host &quot;Creting VMs.&quot; $jobs = 1..$NUM_OF_VMs | ForEach-Object { $splat = @{ Image = &quot;UbuntuLTS&quot; Location = $LOCATION Name = &quot;MyVM-$_&quot; ResourceGroupName = $RESOURCE_GROUP_NAME Credential = $USER_CREDENTIAL AsJob = $true } New-AzVM @splat } # Wait for them to all be created Wait-Job $jobs | Out-Null &quot;Done!&quot; . Creting resource group. Creting VMs. Done! . Now we need to randomly stop a number of them so that the graph below has some variance. . $numOfVMsToStop = Get-Random -Minimum 2 -Maximum $NUM_OF_VMs Write-Host &quot;Randomly stoping $numOfVMsToStop VMs.&quot; $vms = Get-AzVM -ResourceGroupName $RESOURCE_GROUP_NAME $jobs = for ($i = 0; $i -lt $numOfVMsToStop; $i++) { $vms | Get-Random | Stop-AzVM -Force -AsJob } Wait-Job $jobs | Out-Null Write-Host &quot;Done!&quot; . Randomly stoping 4 VMs. Done! . Cleanup - If you wanna clean up these test VMs. Run this: . Note: This can take a LONG time. . Write-Host &quot;Deleting VMs.&quot; $jobs = Get-AzVM -ResourceGroupName $RESOURCE_GROUP_NAME | Remove-AzVM -AsJob -Force Wait-Job $jobs | Out-Null Write-Host &quot;Deleting resource group.&quot; Remove-AzResourceGroup -ResourceGroupName $RESOURCE_GROUP_NAME -Force | Out-Null Write-Host &quot;Done!&quot; . Demo . We&#39;ll be fetching the &quot;PowerState&quot; of each of our VMs in Azure and plotting it on a pie chart. . First, let&#39;s get the data: . $vms = Get-AzVM -Status $data = $vms.PowerState $groupedData = $data | Group-Object $groupedData . Count Name Group -- - -- 7 VM deallocated {VM deallocated, VM deallocated, VM deallocated, VM deallocated‚Ä¶} 10 VM running {VM running, VM running, VM running, VM running‚Ä¶} . Now we can render that data into a Pie graph and plot it in a chart: . $trace = [Graph.Pie]@{ name = &quot;VM PowerState&quot; labels = $groupedData.Name values = [int[]]($groupedData | % Count) } New-PlotlyChart -Title &quot;VM Status&quot; -Trace $trace | Out-Display .",
            "url": "https://tylerleonhardt.github.io/blog/jupyter/powershell/azure/visualization/2020/03/03/Azure-PowerShell-VM-Visualization-Demo.html",
            "relUrl": "/jupyter/powershell/azure/visualization/2020/03/03/Azure-PowerShell-VM-Visualization-Demo.html",
            "date": " ‚Ä¢ Mar 3, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "I‚Äôm a software engineer on the PowerShell team at Microsoft. In addition to PowerShell itself, I work on the Visual Studio Code extension for PowerShell, work on the PowerShell subkernel for .NET Interactive, helped ship the PowerShell experience in Azure Functions v2+, and more! I also live stream coding at work. I‚Äôm a developer experience nut, love coffee and love to customize mechanical keyboards. . I use C#, TypeScript, and of course, PowerShell, every day. . See what I‚Äôm up to both at work and off work on my GitHub üêôüêà .",
          "url": "https://tylerleonhardt.github.io/blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

}