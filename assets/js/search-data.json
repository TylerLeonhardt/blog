{
  
    
        "post0": {
            "title": "Messing with WordClouds using PowerShell",
            "content": "Install-Module PSWordCloud -Force . . Grab the .NET Interactive codebase, extract the zip and delete it: . irm https://api.github.com/repos/dotnet/interactive/zipball -OutFile interactive.zip try { Expand-Archive ./interactive.zip -Force } finally { Remove-Item ./interactive.zip } . . Get all of the files from the interactive folder, read their contents and craft a word cloud with it. . gci -Recurse -File ./interactive/ | gc | New-WordCloud -Path ./dotnet-interactive.svg . . Leveraging the #!markdown magic command, we can render our new SVG: . Note: My blog mangles this path for some reason... the actual &#8217;path&#8217; should just be dotnet-interactive.svg . #!markdown ![.NET Interactive codebase word cloud](/blog/images/copied_from_nb/dotnet-interactive.svg) . .",
            "url": "https://tylerleonhardt.github.io/blog/2020/03/16/Word-Clouds.html",
            "relUrl": "/2020/03/16/Word-Clouds.html",
            "date": " • Mar 16, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Azure PowerShell VM Visualization demo",
            "content": "Install-Module Az.Compute,Az.Resources -Force . . Authenticate and set context . First connect to your Azure account. . Connect-AzAccount . WARNING: To sign in, use a web browser to open the page https://microsoft.com/devicelogin and enter the code EGLUE983V to authenticate. Account SubscriptionName TenantId Environment - - -- -- tyleonha@microsoft.com Thanks Microsoft 72f988bf-86f1-41af-91ab-2d7cd011db47 AzureCloud . (Optional) If your account contains more than one active subscription the first one will be selected for further use. To select another subscription, use Set-AzContext. . Set-AzContext -Subscription &quot;My Subscription&quot; . (Optional) Populate Azure with test VMs . Here&#39;s a script that will create a number of VMs. Feel free to change the value at the top. . Note: This can take a LONG time. . # IMPORTANT VARIABLES $RESOURCE_GROUP_NAME = &#39;VMVisDemo&#39; $LOCATION = &#39;East US 2&#39; $NUM_OF_VMs = 10 $USER_CREDENTIAL = Get-Credential . PowerShell credential request Enter your credentials. . . Write-Host &quot;Creting resource group.&quot; New-AzResourceGroup -Name $RESOURCE_GROUP_NAME -Location $LOCATION | Out-Null Write-Host &quot;Creting VMs.&quot; $jobs = 1..$NUM_OF_VMs | ForEach-Object { $splat = @{ Image = &quot;UbuntuLTS&quot; Location = $LOCATION Name = &quot;MyVM-$_&quot; ResourceGroupName = $RESOURCE_GROUP_NAME Credential = $USER_CREDENTIAL AsJob = $true } New-AzVM @splat } # Wait for them to all be created Wait-Job $jobs | Out-Null &quot;Done!&quot; . Creting resource group. Creting VMs. Done! . Now we need to randomly stop a number of them so that the graph below has some variance. . $numOfVMsToStop = Get-Random -Minimum 2 -Maximum $NUM_OF_VMs Write-Host &quot;Randomly stoping $numOfVMsToStop VMs.&quot; $vms = Get-AzVM -ResourceGroupName $RESOURCE_GROUP_NAME $jobs = for ($i = 0; $i -lt $numOfVMsToStop; $i++) { $vms | Get-Random | Stop-AzVM -Force -AsJob } Wait-Job $jobs | Out-Null Write-Host &quot;Done!&quot; . Randomly stoping 4 VMs. Done! . Cleanup - If you wanna clean up these test VMs. Run this: . Note: This can take a LONG time. . Write-Host &quot;Deleting VMs.&quot; $jobs = Get-AzVM -ResourceGroupName $RESOURCE_GROUP_NAME | Remove-AzVM -AsJob -Force Wait-Job $jobs | Out-Null Write-Host &quot;Deleting resource group.&quot; Remove-AzResourceGroup -ResourceGroupName $RESOURCE_GROUP_NAME -Force | Out-Null Write-Host &quot;Done!&quot; . Demo . We&#39;ll be fetching the &quot;PowerState&quot; of each of our VMs in Azure and plotting it on a pie chart. . First, let&#39;s get the data: . $vms = Get-AzVM -Status $data = $vms.PowerState $groupedData = $data | Group-Object $groupedData . Count Name Group -- - -- 7 VM deallocated {VM deallocated, VM deallocated, VM deallocated, VM deallocated…} 10 VM running {VM running, VM running, VM running, VM running…} . Now we can render that data into a Pie graph and plot it in a chart: . $trace = [Graph.Pie]@{ name = &quot;VM PowerState&quot; labels = $groupedData.Name values = [int[]]($groupedData | % Count) } New-PlotlyChart -Title &quot;VM Status&quot; -Trace $trace | Out-Display .",
            "url": "https://tylerleonhardt.github.io/blog/2020/03/03/Azure-PowerShell-VM-Visualization-Demo.html",
            "relUrl": "/2020/03/03/Azure-PowerShell-VM-Visualization-Demo.html",
            "date": " • Mar 3, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://tylerleonhardt.github.io/blog/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This is where you put the contents of your About page. Like all your pages, it’s in Markdown format. . This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://tylerleonhardt.github.io/blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

}